openapi: 3.0.3
info:
  version: "4.0.0.15"
  title: RealEstateCore.Ontology.DTDLv2
  license:
    name: BSD-3-Clause
  contact:
    name: RealEstateCore
    url: https://github.com/RealEstateCore/rec
  description: RealEstateCore (REC) is an ontology model and API specification for building and interfacing against Smart Buildings, whether on individual building or portfolio level. The REC ontology is released in DTDL (Digital Twin Definition Language) and SHACL (RDF Shapes Contraint language) formats; the REC API is expressed as an OpenAPI Specification (a.k.a. Swagger). We also provide a southbound edge API for bandwidth-constrained devices to communicate telemetry, alerts, commands, etc (see GitHub repository).
components:
  parameters:
    pageParam:
      name: page
      description: If the result set is large, pagination across the results can be employed; in that case, this parameter defines the page number (zero-indexed) that is requested by the client. The number of items included in each page is defined by the 'size' parameter. Default is 0, i.e., the first results page is returned.
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
      in: query
    sizeParam:
      name: size
      description: The number of items to display on a returned results page (see the page parameter).
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 100
        default: 20
      in: query
    sortParam:
      name: sort
      description: The field and direction to sort results on.
      schema:
        $ref: '#/components/schemas/SortingSchema'
      style: deepObject
      in: query
  schemas:
    HydraCollectionWrapper:
      type: object
      required:
      - '@context'
      - '@type'
      - hydra:member
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@type':
          type: string
          default: hydra:Collection
        hydra:totalItems:
          type: integer
        hydra:view:
          type: object
          properties:
            '@id':
              type: string
              format: uri
            '@type':
              type: string
              default: hydra:PartialCollectionView
            hydra:first:
              type: string
            hydra:previous:
              type: string
            hydra:next:
              type: string
            hydra:last:
              type: string
    IntegerFilter:
      type: object
      properties:
        eq:
          type: integer
        lt:
          type: integer
        lte:
          type: integer
        gt:
          type: integer
        gte:
          type: integer
    NumberFilter:
      type: object
      properties:
        eq:
          type: number
        lt:
          type: number
        lte:
          type: number
        gt:
          type: number
        gte:
          type: number
    StringFilter:
      type: object
      properties:
        eq:
          type: string
        contains:
          type: string
        regex:
          type: string
    DateTimeFilter:
      type: object
      properties:
        eq:
          type: string
          format: date-time
        starting:
          type: string
          format: date-time
        ending:
          type: string
          format: date-time
        before:
          type: string
          format: date-time
        after:
          type: string
          format: date-time
        latest:
          type: boolean
    SortingSchema:
      type: object
      properties:
        asc:
          type: string
        desc:
          type: string
    Sensor:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:brickschema:schema:Brick:Sensor;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Sensor.jsonld
        isPointOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        aggregate:
          type: object
        customProperties:
          type: object
        customTags:
          type: object
        hasQuantity:
          type: object
        hasSubstance:
          type: object
        identifiers:
          type: object
        name:
          type: string
    Building:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Building;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Building.jsonld
        address:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:PostalAddress;1
        adjacentElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        architectedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        constructedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        containsElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        intersectingElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        isFedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        operatedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        ownedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        geometry:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Geometry;1
        georeference:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Georeference;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        isLocationOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Space;1
        area:
          $ref: '#/components/schemas/ArchitectureArea'
        capacity:
          $ref: '#/components/schemas/ArchitectureCapacity'
        customProperties:
          type: object
        customTags:
          type: object
        identifiers:
          type: object
        name:
          type: string
        longName:
          type: string
    EnergyBlock:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:EnergyBlock;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/EnergyBlock.jsonld
        address:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:PostalAddress;1
        adjacentElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        architectedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        constructedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        containsElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        intersectingElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        isFedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        operatedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        ownedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        geometry:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Geometry;1
        georeference:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Georeference;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        isLocationOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Space;1
        area:
          $ref: '#/components/schemas/ArchitectureArea'
        capacity:
          $ref: '#/components/schemas/ArchitectureCapacity'
        customProperties:
          type: object
        customTags:
          type: object
        identifiers:
          type: object
        name:
          type: string
        longName:
          type: string
    ArchitectureArea:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:ArchitectureArea;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/ArchitectureArea.jsonld
        grossArea:
          type: number
          format: float
        netArea:
          type: number
          format: float
        rentableArea:
          type: number
          format: float
        customProperties:
          type: object
        customTags:
          type: object
        identifiers:
          type: object
        name:
          type: string
    ArchitectureCapacity:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:ArchitectureCapacity;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/ArchitectureCapacity.jsonld
        maxOccupancy:
          type: integer
          format: int32
        seatingCapacity:
          type: integer
          format: int32
        customProperties:
          type: object
        customTags:
          type: object
        identifiers:
          type: object
        name:
          type: string
    Context:
      type: object
      required:
      - '@vocab'
      - '@base'
      - hydra
      properties:
        '@base':
          type: string
          format: uri
        hydra:
          type: string
          format: uri
          default: http://www.w3.org/ns/hydra/core#
paths:
  /sensors:
    get:
      summary: Get 'Sensor' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPointOf
        description: Filter value on relationship 'isPointOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: aggregate
        description: Filter value on property 'aggregate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customProperties
        description: Filter value on property 'customProperties'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasQuantity
        description: Filter value on property 'hasQuantity'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubstance
        description: Filter value on property 'hasSubstance'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: identifiers
        description: Filter value on property 'identifiers'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Sensor' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
    post:
      summary: Create a new 'Sensor' object.
      parameters: []
      requestBody:
        description: New 'Sensor' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Sensor'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
  /sensors/{id}:
    get:
      summary: Get a specific 'Sensor' object.
      parameters:
      - name: id
        description: Id of 'Sensor' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Sensor' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
    put:
      summary: Update an existing 'Sensor' entity.
      parameters:
      - name: id
        description: Id of 'Sensor' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Sensor' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Sensor'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
    patch:
      summary: Update a single property on a specific 'Sensor' object.
      parameters:
      - name: id
        description: Id of 'Sensor' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Sensor'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
    delete:
      summary: Delete a 'Sensor' object.
      parameters:
      - name: id
        description: Id of 'Sensor' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Sensor' entity was successfully deleted."
      tags:
      - sensors
  /buildings:
    get:
      summary: Get 'Building' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: address
        description: Filter value on relationship 'address'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: adjacentElement
        description: Filter value on relationship 'adjacentElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: architectedBy
        description: Filter value on relationship 'architectedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: constructedBy
        description: Filter value on relationship 'constructedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: containsElement
        description: Filter value on relationship 'containsElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPoint
        description: Filter value on relationship 'hasPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: intersectingElement
        description: Filter value on relationship 'intersectingElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isFedBy
        description: Filter value on relationship 'isFedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: operatedBy
        description: Filter value on relationship 'operatedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: ownedBy
        description: Filter value on relationship 'ownedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: geometry
        description: Filter value on relationship 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: georeference
        description: Filter value on relationship 'georeference'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isLocationOf
        description: Filter value on relationship 'isLocationOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customProperties
        description: Filter value on property 'customProperties'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: identifiers
        description: Filter value on property 'identifiers'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: longName
        description: Filter value on property 'longName'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Building' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Building'
      tags:
      - buildings
    post:
      summary: Create a new 'Building' object.
      parameters: []
      requestBody:
        description: New 'Building' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Building'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - buildings
  /buildings/{id}:
    get:
      summary: Get a specific 'Building' object.
      parameters:
      - name: id
        description: Id of 'Building' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Building' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - buildings
    put:
      summary: Update an existing 'Building' entity.
      parameters:
      - name: id
        description: Id of 'Building' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Building' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Building'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - buildings
    patch:
      summary: Update a single property on a specific 'Building' object.
      parameters:
      - name: id
        description: Id of 'Building' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Building'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - buildings
    delete:
      summary: Delete a 'Building' object.
      parameters:
      - name: id
        description: Id of 'Building' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Building' entity was successfully deleted."
      tags:
      - buildings
  /energiblocks:
    get:
      summary: Get 'Energy Block' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: address
        description: Filter value on relationship 'address'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: adjacentElement
        description: Filter value on relationship 'adjacentElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: architectedBy
        description: Filter value on relationship 'architectedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: constructedBy
        description: Filter value on relationship 'constructedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: containsElement
        description: Filter value on relationship 'containsElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPoint
        description: Filter value on relationship 'hasPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: intersectingElement
        description: Filter value on relationship 'intersectingElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isFedBy
        description: Filter value on relationship 'isFedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: operatedBy
        description: Filter value on relationship 'operatedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: ownedBy
        description: Filter value on relationship 'ownedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: geometry
        description: Filter value on relationship 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: georeference
        description: Filter value on relationship 'georeference'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isLocationOf
        description: Filter value on relationship 'isLocationOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customProperties
        description: Filter value on property 'customProperties'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: identifiers
        description: Filter value on property 'identifiers'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: longName
        description: Filter value on property 'longName'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Energy Block' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/EnergyBlock'
      tags:
      - energiblocks
    post:
      summary: Create a new 'Energy Block' object.
      parameters: []
      requestBody:
        description: New 'Energy Block' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/EnergyBlock'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/EnergyBlock'
      tags:
      - energiblocks
  /energiblocks/{id}:
    get:
      summary: Get a specific 'Energy Block' object.
      parameters:
      - name: id
        description: Id of 'Energy Block' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Energy Block' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Energy Block' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/EnergyBlock'
      tags:
      - energiblocks
    put:
      summary: Update an existing 'Energy Block' entity.
      parameters:
      - name: id
        description: Id of 'Energy Block' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Energy Block' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/EnergyBlock'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Energy Block' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/EnergyBlock'
      tags:
      - energiblocks
    patch:
      summary: Update a single property on a specific 'Energy Block' object.
      parameters:
      - name: id
        description: Id of 'Energy Block' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/EnergyBlock'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Energy Block' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/EnergyBlock'
      tags:
      - energiblocks
    delete:
      summary: Delete a 'Energy Block' object.
      parameters:
      - name: id
        description: Id of 'Energy Block' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Energy Block' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Energy Block' entity was successfully deleted."
      tags:
      - energiblocks
servers:
- url: http://localhost:8080/
